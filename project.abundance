{
  "atomType": "Molecule",
  "name": "Maslow-M",
  "x": 0,
  "y": 0,
  "uniqueID": "b8ee3a55-1a3e-4671-9953-7f2e8695f621",
  "ioValues": [
    {
      "name": "Size",
      "ioValue": 10
    }
  ],
  "topLevel": true,
  "allAtoms": [
    {
      "atomType": "Output",
      "name": "Output",
      "x": 0.98,
      "y": 0.5,
      "uniqueID": "bcc613eb-27e2-431c-9d0a-cee2acff3de6",
      "ioValues": []
    },
    {
      "atomType": "Input",
      "name": "Size",
      "x": 0.029699999999999997,
      "y": 0.18,
      "uniqueID": "9a4ba9c3-d9cb-4001-a97f-747c6cf485af",
      "ioValues": [],
      "type": "number"
    },
    {
      "atomType": "Import",
      "name": "Import",
      "x": 0.39087301587301587,
      "y": 0.7186629526462396,
      "uniqueID": "89f7215a-c1a0-451f-bc30-7cb8a311425a",
      "ioValues": [],
      "fileName": "MakerCAM Project_copy1.svg",
      "type": "SVG",
      "repoOwner": "BarbourSmith",
      "repoName": "Maslow-M"
    },
    {
      "atomType": "GitHubMolecule",
      "name": "Scale",
      "x": 0.5601851851851851,
      "y": 0.5515320334261838,
      "uniqueID": "60cbff66-4355-4f0b-befe-2379cbc3ba12",
      "ioValues": [
        {
          "name": "Scale Factor",
          "ioValue": 10
        }
      ],
      "topLevel": false,
      "allAtoms": [
        {
          "atomType": "Output",
          "name": "Output",
          "x": 0.98,
          "y": 0.5,
          "uniqueID": "694438bf-120a-46fd-8925-71adc5319b3f",
          "ioValues": []
        },
        {
          "atomType": "Input",
          "name": "Geometry",
          "x": 0.029699999999999997,
          "y": 0.18,
          "uniqueID": "787df646-e1b0-476c-ae91-57e95552545e",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Input",
          "name": "Scale Factor",
          "x": 0.029699999999999997,
          "y": 0.27,
          "uniqueID": "bc3fd1b8-8462-48c8-8fe4-26793e2f6551",
          "ioValues": [],
          "type": "number"
        },
        {
          "atomType": "Code",
          "name": "Code",
          "x": 0.4226190476190476,
          "y": 0.25139664804469275,
          "uniqueID": "6a67f842-a533-4333-aaf8-e3181d1a2841",
          "ioValues": [
            {
              "name": "scaleFactor",
              "ioValue": 10
            }
          ],
          "codeVersion": 1,
          "code": " \n      //Inputs:[inputShape, scaleFactor]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n      \n      //Takes the address and gets the shape from the library\n      let importedShape = library[inputShape]\n\n      let scaledShape = await Scale(inputShape, scaleFactor);\n      \n      \n      //Shapes stored in the library have tags, a color, a plane, and a bill of materials like this. We don't modify them here\n      let shape1 = {\n        geometry: [scaledShape],\n        tags: importedShape.tags,\n        color: importedShape.color,\n        plane: importedShape.plane,\n        bom: importedShape.bom\n      }\n      \n      return shape1\n      \n      \n      \n          /**\n          To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n          If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n          Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n          https://replicad.xyz/docs/introapp/UserGuide.html \n          Return a replicad object that includes geometry, color, tags and plane. \n      \n      \n          Example Code Atom:\n      \n            Inputs:[shape, x];\n      \n            let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n      \n            return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n      \n            - See more examples at _______ \n      \n      \n          */\n      "
        }
      ],
      "allConnectors": [
        {
          "ap1Name": "number or geometry",
          "ap2Name": "inputShape",
          "ap1ID": "787df646-e1b0-476c-ae91-57e95552545e",
          "ap2ID": "6a67f842-a533-4333-aaf8-e3181d1a2841"
        },
        {
          "ap1Name": "number or geometry",
          "ap2Name": "scaleFactor",
          "ap1ID": "bc3fd1b8-8462-48c8-8fe4-26793e2f6551",
          "ap2ID": "6a67f842-a533-4333-aaf8-e3181d1a2841"
        },
        {
          "ap1Name": "output",
          "ap2Name": "number or geometry",
          "ap1ID": "6a67f842-a533-4333-aaf8-e3181d1a2841",
          "ap2ID": "694438bf-120a-46fd-8925-71adc5319b3f"
        }
      ],
      "parentRepo": {
        "privateRepo": false,
        "repoName": "Scale",
        "dateCreated": "2025-06-26T17:06:11Z",
        "readMe": "https://raw.githubusercontent.com/BarbourSmith/Scale/master/README.md?sanitize=true",
        "yyyy": 2025,
        "topMoleculeID": "4b6bc40a-44a9-438a-9ed9-ba4910815d8d",
        "githubMoleculesUsed": [],
        "html_url": "https://github.com/BarbourSmith/Scale",
        "topics": [],
        "parentRepo": null,
        "forks": 0,
        "dateModified": "739428",
        "ranking": 0,
        "searchField": "scale barboursmith scales the input 2d or 3d geometry by the scale factor ",
        "owner": "BarbourSmith",
        "description": "Scales the input 2D or 3D geometry by the scale factor",
        "contentURL": "https://raw.githubusercontent.com/BarbourSmith/Scale/master/project.abundance?sanitize=true",
        "svgURL": "https://raw.githubusercontent.com/BarbourSmith/Scale/master/project.svg?sanitize=true",
        "isLocal": false
      },
      "unitsKey": "Unitless",
      "fileTypeVersion": 1,
      "compiledBom": []
    }
  ],
  "allConnectors": [
    {
      "ap1Name": "number or geometry",
      "ap2Name": "Scale Factor",
      "ap1ID": "9a4ba9c3-d9cb-4001-a97f-747c6cf485af",
      "ap2ID": "60cbff66-4355-4f0b-befe-2379cbc3ba12"
    },
    {
      "ap1Name": "output",
      "ap2Name": "Geometry",
      "ap1ID": "89f7215a-c1a0-451f-bc30-7cb8a311425a",
      "ap2ID": "60cbff66-4355-4f0b-befe-2379cbc3ba12"
    },
    {
      "ap1Name": "geometry or number",
      "ap2Name": "number or geometry",
      "ap1ID": "60cbff66-4355-4f0b-befe-2379cbc3ba12",
      "ap2ID": "bcc613eb-27e2-431c-9d0a-cee2acff3de6"
    }
  ],
  "unitsKey": "MM",
  "fileTypeVersion": 1,
  "compiledBom": [],
  "filetypeVersion": 1
}